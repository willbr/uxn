|00 @System &vector $2 &wst $1 &rst $1 &pad $4 &r $2 &g $2 &b $2 &debug $1 &state $1
|10 @Console &vector $2 &read $1 &pad $5 &write $1
|20 @Screen &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button $1 &key $1
|90 @Mouse &vector $2 &x $2 &y $2 &state $1 &wheel $1
|a0 @File &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2

%debug { #01 .System/debug DEO }

%HALT  { #01 .System/state DEO }
%up    { #10 }
%down  { #20 }
%left  { #40 }
%right { #80 }
%k_esc { #1b }
%k_backspace { #08 }
%k_delete { #7f }
%k_tab { #09 }
%k_enter { #0d }
%c_null { #00 }
%c_cr { #0d }
%c_space { #20 }

%mask_up    { #10 }
%mask_down  { #20 }
%mask_left  { #40 }
%mask_right { #80 }

%mask_ctrl  { #01 }
%mask_alt   { #02 }
%mask_shift { #04 }
%mask_home  { #08 }

%DEC  { #01 SUB }
%DEC2 { #0001 SUB2 }

%line_size8   { #20 }
%line_size16  { #0020 }
%line_count8  { #08 }
%line_count16 { #0008 }

%ds {
  DUP2 ;draw-short JSR2
  LIT ': ;draw-char JSR2
}


|0100
  #0100 .Screen/width  DEO2
  #0100 .Screen/height DEO2

  #2d0f .System/r DEO2
  #2ddf .System/g DEO2
  #2ddf .System/b DEO2

  ;on-key .Controller/vector DEO2
  ;on-frame .Screen/vector DEO2

  #2a ;window/buffer
  ( calc size )
  ;window/end ;window/buffer SUB2
  ;memset JSR2

  ;window/buffer ;window/line_start STA2

  ( calc line end )
  ;window/buffer line_size16 ADD2
  ;window/line_end STA2

  ;window/buffer
  line_size16 line_count16 MUL2 ADD2
  ;window/buffer_end STA2
BRK


@memset ( char addr16 n16 -- )
&loop
  DUP2 #0000 EQU2 ,&end JCN
  DEC2  STH2

  STAk

  INC2
  STH2r

  ,&loop JMP
&end
  POP2
  POP2
  POP
JMP2r


@on-key ( -- )
  debug
  .Controller/key DEI

  ( store keycode )
  DUP ;key STA

  DUP #00 EQU ;on-modifier JCN2
  DUP k_esc EQU ;on-esc JCN2
  (
  DUP k_enter EQU ;on-enter JSR2
  DUP k_backspace EQU ;on-backspace JCN2
  DUP k_delete EQU ;on-delete JCN2
  )

  ( DUP ;add-to-line-buffer JSR2 )
  ;emit JSR2
BRK


@on-modifier
  .Controller/button DEI
  DUP ;button STA
  DUP mask_left AND ;on-left JCN2
  DUP mask_right AND ;on-right JCN2
  DUP mask_up AND ;on-up JCN2
  DUP mask_down AND ;on-down JCN2
  POP
BRK


@on-left
  POP
  ;window/cursor DUP2 LDA2
  DUP2 ;window/line_start LDA2 EQU2 ,&underflow JCN
  DEC2 SWP2 STA2
BRK

&underflow
  POP2
  POP2
BRK



@on-right ( key8 -- )
  POP
  ;window/cursor DUP2 LDA2
  DUP2 INC2 ;window/line_end LDA2 EQU2 ,&overflow JCN
  INC2 SWP2 STA2
BRK
&overflow
  POP2
  POP2
BRK


@on-up
  ;prev-line JSR2
BRK


@on-down
  ;window/line_end LDA2
  ;window/buffer_end LDA2
  EQU2 ,&underflow JCN

  line_size16 ;window/cursor ;inc-by-16 JSR2
  ;next-line JSR2
&underflow
BRK


@next-line
  ;window/line_end LDA2
  ;window/buffer_end LDA2
  EQU2 ,&underflow JCN

  line_size16
  DUP2 ;window/line_start ;inc-by-16 JSR2
  ;window/line_end ;inc-by-16 JSR2
&underflow
JMP2r

@prev-line
  ;window/line_start LDA2
  ;window/buffer
  EQU2 ,&overflow JCN

  #0000 line_size16 SUB2
  DUP2 ;window/line_start ;inc-by-16 JSR2
  DUP2 ;window/line_end ;inc-by-16 JSR2
  ;window/cursor ;inc-by-16 JSR2
JMP2r

&overflow
JMP2r

@inc-by-16 ( n16 addr16 -- )
  DUP2 LDA2
  ( addr val n16 + )
  ROT2 ADD2
  SWP2
  STA2
JMP2r


@strlen ( addr16 )
  ( store the counter on the return stack )
  #00 STH
&loop
  LDAk
  #00 EQU ,&end JCN
  INCr
  INC2
  ,&loop JMP
  &end
  POP2
  STHr
JMP2r


@strsize ( addr16 )
  ;strlen JSR2
  ( add 1 for null terminator )
  INC
JMP2r


@strcpy ( src16 dst16 -- )
  OVR2

  ( calc source size )
  ;strsize JSR2

  ROT ROT
  ;memcpy JSR2
JMP2r


@on-enter
JMP2r


@on-esc
  POP
  HALT
BRK


@on-backspace
BRK

&underflow
  POP2
BRK


@on-delete
BRK


@on-frame
  ;clear-screen JSR2
  ;render-screen JSR2
  ;draw-cursor JSR2

  #0000 .Screen/x DEO2
  #00b0 .Screen/y DEO2
  ;error LDA ;draw-byte JSR2

  #0000 .Screen/x DEO2
  #00c0 .Screen/y DEO2
  ;debug-key JSR2

  ;window/line_end LDA2 #00d0 ;debug-short JSR2
  ;window/buffer_end LDA2 #00e0 ;debug-short JSR2
  ;window/cursor LDA2 #00f0 ;debug-short JSR2
BRK


@debug-short ( u16 line.y16 -- )
  #0000 .Screen/x DEO2
  .Screen/y DEO2
  c_space ;draw-char JSR2
  ;draw-short JSR22
JMP2r


@debug-key
  #20 ;draw-char JSR2
  ;key LDA
  ;draw-byte JSR2
  #20 ;draw-char JSR2
  ;button LDA
  ;draw-byte JSR2
JMP2r


@clear-screen
  #0000
&loop
  DUP2 #0200 EQU2 ,&end JCN
  DUP2 ;clear-column JSR2
  #0010 ADD2
  ,&loop JMP
&end
  POP2
JMP2r


@clear-column ( x16 -- )
 .Screen/x DEO2
  #0000 .Screen/y DEO2
  #00
&loop
  DUP #14 EQU ,&end JCN
  ;clear .Screen/addr DEO2
  #16 .Screen/auto DEO

  .Screen/x DEI2
  .Screen/y DEI2
  (
  ( bg ) #01 .Screen/sprite DEOk DEO
  )
  ( reset xy )
  .Screen/y DEO2
  .Screen/x DEO2
  ( fg ) #41 .Screen/sprite DEOk DEO

  INC
  ,&loop JMP
&end
  POP
JMP2r


@render-screen
  ;window/buffer ;render-buffer JSR2
JMP2r


@render-buffer ( add16 -- )
  #0000 .Screen/x DEO2
  #0000 .Screen/y DEO2

&loop
  DUP2 ;window/buffer_end LDA2 EQU2 ,&end JCN

  DUP2 ;render-line JSR2
  ;cr JSR2

  line_size16 ADD2
  ,&loop JMP

&end
  POP2
JMP2r


@cr
  #0000 .Screen/x DEO2
  .Screen/y DEI2 #0010 ADD2 .Screen/y DEO2
JMP2r


@render-line ( add16 -- )
  #00 STH
&loop
  line_size8 STHrk EQU ,&end JCN
  LDAk
  ;draw-char JSR2
  INCr
  INC2
  ,&loop JMP
&end
  POPr
  POP2
JMP2r


@render-cstr
&loop
  LDAk
  DUP #00 EQU ,&end JCN
  ;draw-char JSR2
  INC2
  ,&loop JMP
&end
  POP
  POP2
JMP2r


@draw-short ( u16 -- )
  SWP
  ;draw-byte JSR2
  ;draw-byte JSR2
JMP2r


@draw-byte ( u8 -- )
	DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD
  ;draw-char JSR2
JMP2r


@draw-char ( u8 -- )
  #15 .Screen/auto DEO

  ( cast to u16 )
  #00 SWP
  DUP2

  ( convert to offset )
  #0020 MUL2

  ( skip font header )
  ;font #0100 ADD2

  ( skip to char )
  ADD2

  .Screen/addr DEO2

  ;font ADD2 LDA #00 SWP .Screen/x DEI2 ADD2
  #01 .Screen/sprite DEOk DEO
  .Screen/x DEO2
JMP2r


@char-width ( char8 -- width8 )
  ( convert to u16 )
  #00 SWP

  ( offset into array )
  ;font
  ADD2

  ( deref )
  LDA
JMP2r


@skip-forward
  ( stash offset )
  #0000 STH2
  ;window/cursor   LDA2
  ;window/line_start LDA2
&loop
  OVR2 OVR2 EQU2 ,&end JCN
  DUP2 LDA ;char-width JSR2
  #00 SWP STH2 ADD2r

  INC2
  ,&loop JMP
&end
  POP2
  POP2
  STH2r
JMP2r


@skip-down
  #0000 STH2
  ;window/line_start LDA2
  ;window/buffer
&loop
  OVR2 OVR2 EQU2 ,&end JCN
  INC2r
  line_size16
  ADD2
  ,&loop JMP
&end
  POP2
  POP2
  STH2r
JMP2r


@draw-cursor
  ;skip-forward JSR2
  .Screen/x DEO2

  ;skip-down JSR2
  #0010 MUL2
  .Screen/y DEO2

  ;cursor .Screen/addr DEO2
  #16 .Screen/auto DEO
  #41 .Screen/sprite DEOk DEO
JMP2r


@memcpy ( src16 len8 dst16 -- )
  STH2
&loop
  DUP #00 EQU ,&end JCN
  STH ROTr ROTr
  LDAk STH2rk STA

  ( step )
  INC2
  INC2r
  ROTr STHr #01 SUB
  ,&loop JMP

&end
  POP
  POP2
  POP2r
JMP2r


@emit ( char -- )
  DUP k_enter EQU ;emit-enter JCN2
  DUP k_backspace EQU ;emit-backspace JCN2
  DUP k_tab EQU ;emit-tab JCN2

  ( other key )
  ;window/cursor LDA2
  DUP2 ;check-window-overflow JSR2 ,&overflow JCN
  STAk
  INC2
  DUP2 ;check-line-overflow JSR2
  DUP2 ;check-window-overflow JSR2 ,&overflow JCN
  ;window/cursor STA2
  POP ( char )
JMP2r
&overflow
  POP2
  POP
JMP2r

@check-window-overflow ( cursor16 -- bool )
  ;window/buffer_end LDA2 EQU2 ,&overflow JCN
  #00
JMP2r
&overflow
  #01
JMP2r

@check-line-overflow ( cursor -- )
  ;window/line_end LDA2 NEQ2 ,&end JCN
  ;next-line JSR2

&end
JMP2r


@emit-tab ( char -- )
  c_space ;emit JSR2
  c_space ;emit JSR2
  c_space ;emit JSR2
  c_space ;emit JSR2
JMP2r


@emit-enter ( char -- )
  POP
  ;window/line_start LDA2
  line_size16
  ADD2
  ;window/line_start STA2k
  POP2
  ;window/cursor STA2
JMP2r


@emit-backspace ( char -- )
  POP ( char )
  ;window/cursor LDA2
  DUP2 ;window/line_start LDA2 EQU2 ,&underflow JCN

  DEC2 ;window/cursor STA2
  #20 ;window/cursor LDA2 STA

  JMP2r
&underflow
  POP2
JMP2r

@cursor
  f8f8 f8f8 f8f8 f8f8 0000 0000 0000 0000
  f8f8 f8f8 f800 0000 0000 0000 0000 0000

@clear
  0000 0000 0000 0000 0000 0000 0000 0000
  0000 0000 0000 0000 0000 0000 0000 0000

@font
~font.tal

@key    00
@button 00
@error  00

@window
&line_start $2
&line_end   $2
&buffer_end $2
&cursor   :&buffer
&buffer $1000
&end

