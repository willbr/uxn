|00 @System &vector $2 &wst $1 &rst $1 &pad $4 &r $2 &g $2 &b $2 &debug $1 &state $1
|10 @Console &vector $2 &read $1 &pad $5 &write $1
|20 @Screen &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|80 @Controller &vector $2 &button $1 &key $1
|90 @Mouse &vector $2 &x $2 &y $2 &state $1 &wheel $1
|a0 @File &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2

%debug { #01 .System/debug DEO }

%HALT  { #01 .System/state DEO }
%up    { #10 }
%down  { #20 }
%left  { #40 }
%right { #80 }
%k_esc { #1b }
%k_backspace { #08 }
%k_tab { #09 }
%k_enter { #0d }
%c_null { #00 }
%c_cr { #0d }
%c_space { #20 }

%DEC  { #01 SUB }
%DEC2 { #0001 SUB2 }

%line_size8  { #80 }
%line_size16 { #0080 }

%ds {
  DUP2 ;draw-short JSR2
  LIT ': ;draw-char JSR2
}


|0100
  #0100 .Screen/width  DEO2
  #0100 .Screen/height DEO2

  #2d0f .System/r DEO2
  #2ddf .System/g DEO2
  #2ddf .System/b DEO2

  ;on-key .Controller/vector DEO2
  ;on-frame .Screen/vector DEO2
BRK


@on-key ( -- )
debug
  .Controller/key DEI

  ( store keycode )
  DUP ;key STA

  DUP #00 EQU ,&end JCN
  DUP k_esc EQU ;on-esc JCN2
  (
  DUP k_enter EQU ;on-enter JSR2
  DUP k_backspace EQU ;on-backspace JCN2
  )

  ( DUP ;add-to-line-buffer JSR2 )
  ;emit JSR2
&end
BRK


@add-to-line-buffer ( char8 -- )
  ;line/in LDA2
  DUP2 ;line/end EQU2 ,&overflow JCN
  STA
  ;line/in LDA2 INC2 ;line/in STA2
  #00 ;line/in LDA2 STA
JMP2r
&overflow
  POP2
  POP
BRK


@strlen ( addr16 )
  ( store the counter on the return stack )
  #00 STH
&loop
  LDAk
  #00 EQU ,&end JCN
  INCr
  INC2
  ,&loop JMP
  &end
  POP2
  STHr
JMP2r


@strsize ( addr16 )
  ;strlen JSR2
  ( add 1 for null terminator )
  INC
JMP2r


@strcpy ( src16 dst16 -- )
  OVR2

  ( calc source size )
  ;strsize JSR2

  ROT ROT
  ;memcpy JSR2
JMP2r


@on-enter
  ( copy line/buffer to the current window line )
  ;line/buffer

  ( calc destination )
  ;window
  line_size16
  ;window/cur_line LDA2
  MUL2
  ADD2

  ;strcpy JSR2

  ( reset buffer )
  ;line/buffer ;line/in STA2
  #00 ;line/buffer STA
JMP2r


@on-esc
  POP
  HALT
BRK


@on-backspace
  POP

  ( insert null )
  #00 ;line/in LDA2 STA

  ( read pointer )
  ;line/in LDA2

  DUP2 ;line/buffer EQU2 ,&underflow JCN

  #0001 SUB2 ;line/in STA2
  #20 ;line/in LDA2 STA
BRK

&underflow
  POP2
BRK


@on-frame
  ( ;clear-screen JSR2 )
  ;render-screen JSR2

  #0000 .Screen/x DEO2
  #0010 .Screen/y DEO2
  ( ;debug-key JSR2 )

  #0000 .Screen/x DEO2
  #00d0 .Screen/y DEO2
  ;error LDA ;draw-byte JSR2

  #0000 .Screen/x DEO2
  #00e0 .Screen/y DEO2
  ;window/cursor LDA2 ;draw-short JSR2

  #0000 .Screen/x DEO2
  #00f0 .Screen/y DEO2
  ;debug-key JSR2
BRK


@debug-key
  LIT '( ;draw-char JSR2
  LIT '0 ;draw-char JSR2
  LIT 'x ;draw-char JSR2
  ;key LDA
  ;draw-byte JSR2
  LIT ') ;draw-char JSR2
JMP2r


@clear-screen
  #0000
&loop
  DUP2 #0200 EQU2 ,&end JCN
  DUP2 ;clear-column JSR2
  #0010 ADD2
  ,&loop JMP
&end
  POP2
JMP2r


@clear-column ( x16 -- )
 .Screen/x DEO2
  #0000 .Screen/y DEO2
  #00
&loop
  DUP #14 EQU ,&end JCN
  ;draw-smile JSR2
  INC
  ,&loop JMP
&end
  POP
JMP2r


@render-screen
  ;window/buffer ;render-buffer JSR2

  #0000 .Screen/x DEO2
  #0050 .Screen/y DEO2

  #00f0 .Screen/y DEO2
  #0000 .Screen/x DEO2
  ;draw-cursor JSR2

JMP2r


@render-buffer ( add16 -- )
  #0000 .Screen/x DEO2
  #0000 .Screen/y DEO2

&loop
  DUP2 ;window/end GTH2 ,&end JCN

  DUP2 ;render-line JSR2
  ;cr JSR2

  line_size16 ADD2
  ,&loop JMP

&end
  POP2
JMP2r


@cr
  #0000 .Screen/x DEO2
  .Screen/y DEI2 #0010 ADD2 .Screen/y DEO2
JMP2r


@render-line ( add16 -- )
&loop
  LDAk
  DUP c_null EQU ,&end JCN
  ;draw-char JSR2
  INC2
  ,&loop JMP
&end
  POP
  POP2
JMP2r


@render-cstr
&loop
  LDAk
  DUP #00 EQU ,&end JCN
  ;draw-char JSR2
  INC2
  ,&loop JMP
&end
  POP
  POP2
JMP2r


@draw-short ( u16 -- )
  SWP
  ;draw-byte JSR2
  ;draw-byte JSR2
JMP2r


@draw-byte ( u8 -- )
	DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD
  ;draw-char JSR2
JMP2r


@draw-char ( u8 -- )
  #15 .Screen/auto DEO

  ( cast to u16 )
  #00 SWP
  DUP2

  ( convert to offset )
  #0020 MUL2

  ( skip font header )
  ;font #0100 ADD2

  ( skip to char )
  ADD2

  .Screen/addr DEO2

  ;font ADD2 LDA #00 SWP .Screen/x DEI2 ADD2
  #01 .Screen/sprite DEOk DEO
  .Screen/x DEO2
JMP2r


@draw-cursor
  ;cursor .Screen/addr DEO2
  #16 .Screen/auto DEO
  #01 .Screen/sprite DEOk DEO
JMP2r


@draw-smile ( -- )
  ;smile-icns .Screen/addr DEO2
  #16 .Screen/auto DEO
  #01 .Screen/sprite DEOk DEO
JMP2r

@memcpy ( src16 len8 dst16 -- )
  STH2
&loop
  DUP #00 EQU ,&end JCN
  STH ROTr ROTr
  LDAk STH2rk STA

  ( step )
  INC2
  INC2r
  ROTr STHr #01 SUB
  ,&loop JMP

&end
  POP
  POP2
  POP2r
JMP2r


@emit ( char -- )
  DUP k_enter EQU ;emit-enter JCN2
  DUP k_backspace EQU ;emit-backspace JCN2
  DUP k_tab EQU ;emit-tab JCN2

  ( other key )
  ;window/cursor LDA2 STAk
  INC2 ;window/cursor STA2
  POP ( char )
JMP2r


@emit-tab ( char -- )
  c_space ;emit JSR2
  c_space ;emit JSR2
  c_space ;emit JSR2
  c_space ;emit JSR2
JMP2r

@emit-enter ( char -- )
  POP
  ;window/cur_line LDA2
  line_size16
  ADD2
  ;window/cur_line STA2k
  POP2
  ;window/cursor STA2
JMP2r


@emit-backspace ( char -- )
  POP ( char )
  ;window/cursor LDA2
  DUP2 ;window/cur_line LDA2 EQU2 ,&underflow JCN

  DEC2 ;window/cursor STA2
  #20 ;window/cursor LDA2 STA
JMP2r
&underflow
  POP2
JMP2r

@smile-icns
  ( first row )
  0007 1820 2040 4044 00e0 1804 0402 0222
  ( second row )
  4040 4423 2018 0700 0202 22c4 0418 e000

@cursor
  ( first row )
  f8f8 f8f8 f8f8 f8f8 0000 0000 0000 0000
  ( second row )
  f8f8 f8f8 f800 0000 0000 0000 0000 0000

@font
~font.tal

@key 00
@error 00

@line
&in    :&buffer
&buffer $10
&end
$1 ( extra space for null char )

@window
&cur_line :&buffer
&cursor   :&buffer
&buffer
$1000
&end

