( a little script to test operators )

|0000

	@id $1
	@sum $1
	@zeropage &byte $1 &short $2

|0100

	( Stack )

	( INC )
	#0000 INC2 [ #0001 ] ;res2 JSR2
	#0001 INC2 [ #0002 ] ;res2 JSR2
	#ffff INC2 [ #0000 ] ;res2 JSR2
	#00 INC [ #01 ] ;res1 JSR2
	#01 INC [ #02 ] ;res1 JSR2
	#ff INC [ #00 ] ;res1 JSR2
	#03 INCk ADD [ #07 ] ;res1 JSR2
	( POP )
	#02 #03 POP [ #02 ] ;res1 JSR2
	#02 POPk [ #02 ] ;res1 JSR2
	( DUP )
	#02 DUP ADD [ #04 ] ;res1 JSR2
	( NIP )
	#01 #02 #03 NIP ADD [ #04 ] ;res1 JSR2
	#12 #34 NIPk ADD ADD [ #7a ] ;res1 JSR2
	( SWP )
	#02 #10 SWP DIV [ #08 ] ;res1 JSR2
	#02 #10 SWPk ADD2 MUL [ #44 ] ;res1 JSR2
	( OVR )
	#02 #10 OVR DIV ADD [ #0a ] ;res1 JSR2
	( ROT )
	#02 #04 #10 ROT DIV ADD [ #0c ] ;res1 JSR2



	#0a18 DEO #0a18 DEO

	.sum LDZ ;print/byte JSR2 LIT '/ #18 DEO .id LDZ ;print/byte JSR2 #0a18 DEO

	#010f DEO

BRK

@res1 ( a b -- )

	EQU ,res JMP

@res2 ( a* b* -- )

	EQU2

@res ( pass -- )

	.sum LDZ OVR ADD .sum STZ
	.id LDZ
		DUP #07 AND ,&no-lb JCN #0a18 DEO &no-lb
		INCk .id STZ
		,print/byte JSR
	#2018 DEO
	#00 SWP #10 SFT ;msg ADD2 LDA2 ,print-str JSR
	#2018 DEO

JMP2r

@print ( short* -- )

	SWP ,&byte JSR
	&byte ( byte -- ) DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD #18 DEO

JMP2r

@print-str ( str* -- )

	&while
		LDAk #18 DEO
		INC2 LDAk ,&while JCN
	POP2

JMP2r

@msg :&fail :&pass &pass "pass $1 &fail "fail $1
@absolute &byte $1 &short $2
