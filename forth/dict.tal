@Builtin-emit
&link :Builtin-colon
&name-length 04
&name "emit 00
&code ;emit JMP2

@Builtin-colon
&link :Builtin-semi-colon
&name-length 01
&name ": 00
&code ;colon JMP2

@Builtin-semi-colon
&link :Builtin-print-tos
&name-length 81
&name "; 00
&code ;semi-colon JMP2

@Builtin-print-tos
&link :Builtin-add
&name-length 01
&name ". 00
&code ;print-tos JMP2

@Builtin-add
&link :Builtin-minus
&name-length 01
&name "+ 00
&code ;add JMP2

@Builtin-minus
&link :Builtin-mult
&name-length 01
&name "- 00
&code ;minus JMP2

@Builtin-mult
&link :Builtin-div
&name-length 01
&name "* 00
&code ;mult JMP2

@Builtin-div
&link :Builtin-dup
&name-length 01
&name "/ 00
&code ;div JMP2

@Builtin-dup
&link :Builtin-swap
&name-length 03
&name "dup 00
&code ;dup JMP2

@Builtin-swap
&link :Builtin-print-stack
&name-length 04
&name "swap 00
&code
  SWP2
JMP2r

@Builtin-print-stack
&link :Builtin-peek16
&name-length 02
&name ".s 00
&code ;print-stack JMP2

@Builtin-peek16
&link :Builtin-poke16
&name-length 01
&name "@ 00
&code ;peek16 JMP2

@Builtin-poke16
&link :Builtin-peek8
&name-length 01
&name "! 00
&code ;poke16 JMP2

@Builtin-peek8
&link :Builtin-poke8
&name-length 02
&name "c@ 00
&code ;peek8 JMP2

@Builtin-poke8
&link :Builtin-comma16
&name-length 02
&name "c! 00
&code ;poke8 JMP2

@Builtin-comma16
&link :Builtin-comma8
&name-length 01
&name ", 00
&code ;comma16 JMP2

@Builtin-comma8
&link :Builtin-debug
&name-length 02
&name "c, 00
&code ;comma8 JMP2

@Builtin-debug
&link :Builtin-left-bracket
&name-length 05
&name "debug 00
&code
  debug
  JMP2r

@Builtin-left-bracket
&link :Builtin-right-bracket
&name-length 81
&name "[ 00
&code
  false .state STZ
  JMP2r

@Builtin-right-bracket
&link :Builtin-cfa
&name-length 81
&name "] 00
&code
  true .state STZ
  JMP2r

@Builtin-cfa
&link :Builtin-dis
&name-length 04
&name ">cfa 00
&code
  ;dict-code JSR2
  JMP2r

@Builtin-dis
&link :Builtin-branch
&name-length 03
&name "dis 00
&code
  ( drop the high byte )
  NIP
  ;dis JSR2
JMP2r

@Builtin-branch
&link :Builtin-0branch
&name-length 06
&name "branch 00
&code
  STH2r
  ADD2
  JMP2

@Builtin-0branch
&link :Builtin-tick
&name-length 07
&name "0branch 00
&code ( bool addr16 -- )
  #beef #cafe POP2 POP2
  POP2
  POP2
JMP2r

@Builtin-tick
&link :Builtin-immediate
&name-length 01
&name "' 00
&code
  DUP2r
  STH2r

  ( assert next instruction is LIT2 )
  ( DUP2 LDA LIT LIT2 NEQ )

  ( skip LIT byte to get next address )
  #0001 ADD2

  INC2r
  INC2r
  INC2r
  INC2r

  ( repl version code )
  (
  ;read-word JSR2
  ;lookup JSR2
  ;dict-code JSR2
  )
JMP2r

@Builtin-immediate
&link :var-base
&name-length 89
&name "immediate 00
&code
  ( get flag addr )
  ;latest LDA2 INC2 INC2

  ( |= flag )
  LDAk mask-immediate ORA

  ( rotate address to tos )
  ROT ROT
  STA
JMP2r


@var-base
&link :var-state
&name-length 04
&name "base 00
&code
  ;base
  JMP2r

@var-state
&link :var-here
&name-length 05
&name "state 00
&code
  ;state
  JMP2r

@var-here
&link :var-latest
&name-length 04
&name "here 00
&code
  ;here
  JMP2r

@var-latest
&link 0000
&name-length 06
&name "latest 00
&code
  ;latest
  JMP2r

