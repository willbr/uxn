%mask-modes   { #e0 }
%mask-opcodes { #1f }
%mask-keep    { #80 }
%mask-return  { #40 }
%mask-short   { #20 }

@parse-number ( *str -- u16 success )
( #30 to #39 is ascii 0 - 9
  #61 to #66 is ascii a - f )

  ( DUP2 ;println JSR2 )

  INC2 ( skip length )

  #0000 STH2

&loop
  LDAk null EQU ,&end JCN

  #00 .base LDZ STH2 MUL2r

  ( LDAk EMIT space EMIT LDAk ;print-byte JSR2 CR )

  LDAk DUP #2f GTH SWP #3a LTH AND ,&numeral JCN
  LDAk DUP #60 GTH SWP #67 LTH AND ,&hex JCN
  ,&error JMP

&next
  INC2
  ,&loop JMP

&numeral
  ( LIT 'n EMIT )
  LDAk C_0 SUB 
  #00 SWP STH2 ADD2r
  ,&next JMP

&hex
  ( LIT 'h EMIT )
  LDAk #57 SUB
  #00 SWP STH2 ADD2r
  ,&next JMP

&error
  ;String-Error/invalid-char ;print-str JSR2
  LIT '" EMIT
  LDAk EMIT
  LIT '" EMIT
  CR
  POP2r ( drop return value )
  POP2  ( drop char pointer )
  #01
JMP2r

&end
  POP2  ( drop char pointer )
  STH2r ( unstash return value )
  #00
JMP2r


@string-equal ( *str1 *str2 -- u8 )
(
  LDAk ;print-byte JSR2
  space EMIT
  DUP2 ;print-str JSR2
  space EMIT
  LIT '= EMIT
  space EMIT
  OVR2
  LDAk ;print-byte JSR2
  space EMIT
  ;print-str JSR2
  CR
  )
  STH2

&loop
  LDAk
  STH2rk LDA

  ( DUP2 ;print-short JSR2 CR )

  NEQk ,&fail JCN
  #00 EQU SWP #00 EQU
  AND ,&match JCN

  ( next )
  INC2
  INC2r
  ,&loop JMP


&match
  POP2  ( *str1 )
  POP2r ( *str2 )
  #01
JMP2r

&fail
  POP2  ( c1 c2 )
  POP2  ( *str1 )
  POP2r ( *str2 )
  #00
JMP2r


@print-byte ( byte -- )
	DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD #18 DEO
JMP2r


@print-short ( short -- )
  SWP
  ;print-byte JSR2
  ;print-byte JSR2
JMP2r


@print-str ( *str -- )
  INC2
  ;print-cstr JSR2
JMP2r


@print-cstr ( *cstr -- )
  ,&cond JMP
	&while
		LDAk EMIT
		INC2
    &cond
    LDAk ,&while JCN
	POP2
JMP2r

@println ( *str -- )
  ,print-str JSR
  CR
JMP2r


@memcmp ( src16 len8 dst16 -- )
  STH2
&loop
  DUP #00 EQU ,&success JCN
  STH ROTr ROTr
  LDAk
  LDAkr STHr
  NEQ ,&fail JCN

  ( step )
  INC2
  INC2r
  ROTr STHr #01 SUB
  ,&loop JMP

&success
  POP
  POP2
  POP2r
  #01
JMP2r

&fail
  POPr
  POP2
  POP2r
  #00
JMP2r


@memcpy ( src16 len8 dst16 -- )
  STH2
&loop
  DUP #00 EQU ,&end JCN
  STH ROTr ROTr
  LDAk STH2rk STA

  ( step )
  INC2
  INC2r
  ROTr STHr #01 SUB
  ,&loop JMP

&end
  POP
  POP2
  POP2r
JMP2r


@dump ( addr u -- )
  STHk
&loop
  #00 EQU ,&end JCN
  DUP2 ;print-short JSR2
  space EMIT
  LDAk ;print-byte JSR2
  space EMIT
  LDAk ;debug-ascii JSR2
  space EMIT
  LDAk ;debug-instruction JSR2
  CR

  ( step )
  INC2
  STHr
  #01 SUB
  STHk
  ,&loop JMP

&end
  POP2
  POPr

JMP2r


@debug-ascii ( c8 -- )
  DUP #00 EQU ,&null JCN
  DUP #20 LTH ,&hidden JCN
  DUP #7e GTH ,&hidden JCN
  EMIT
JMP2r
&null
  POP
  LIT '\ EMIT
  LIT '0 EMIT
JMP2r
&hidden
  LIT '? EMIT
  POP
JMP2r


@debug-instruction ( c8 -- )
  DUP ;debug-opcode JSR2
  ;debug-mode JSR2
JMP2r


@debug-mode ( c8 -- )
  DUP mask-opcodes AND
  #00 EQU ,&end JCN

  DUP mask-keep AND #00 EQU ,&not-keep JCN
  LIT 'k EMIT
&not-keep

  DUP mask-return AND #00 EQU ,&not-return JCN
  LIT 'r EMIT
&not-return

  DUP mask-short AND #00 EQU ,&not-short JCN
  LIT '2 EMIT
&not-short

&end
  POP
JMP2r


@debug-opcode ( c8 -- )
  DUP mask-opcodes AND
  DUP #00 NEQ ,&other JCN
  OVR mask-keep EQU ,&op-lit JCN
  POP2
  LIT 'B EMIT
  LIT 'R EMIT
  LIT 'K EMIT
JMP2r

&op-lit
  POP2
  ;&lit ;print-cstr JSR2
JMP2r

&other
  NIP

  ( calc table offset )
  #04 MUL #00 SWP
  ;&table ADD2

  ;print-cstr JSR2
JMP2r

( Stack )
&lit
"LIT 00
&table
"BRK 00
"INC 00
"POP 00
&nip
"NIP 00
"SWP 00
"ROT 00
"DUP 00
"OVR 00

( Logic )
"EQU 00
"NEQ 00
"GTH 00
"LTH 00
"JMP 00
"JCN 00
"JSR 00
"STH 00

( Memory )
"LDZ 00
"STZ 00
"LDR 00
"STR 00
"LDA 00
"STA 00
"DEI 00
"DEO 00

( Arithmetic )
"ADD 00
"SUB 00
"MUL 00
"DIV 00
"AND 00
"ORA 00
"EOR 00
"SFT 00

@String-Error
&invalid-char    00 "invalid 20 "char: 20 00
