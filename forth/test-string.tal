~header.tal

|0100
  ;init JSR2

  ;hello ;println JSR2

  #be ;print-byte JSR2
  #ef ;print-byte JSR2
  space EMIT
  #cafe ;print-short JSR2 CR

  ;test-string-equal JSR2
  ;test-memcmp JSR2
  ;test-parse-number JSR2

  LIT LIT ;debug-instruction JSR2 CR
  LIT BRK ;debug-instruction JSR2 CR
  LIT INCk ;debug-instruction JSR2 CR
  LIT POPr ;debug-instruction JSR2 CR
  LIT SWP2 ;debug-instruction JSR2 CR
  LIT ROT ;debug-instruction JSR2 CR
  LIT DUP ;debug-instruction JSR2 CR
  LIT OVR ;debug-instruction JSR2 CR
  LIT SFTkr2 ;debug-instruction JSR2 CR

  ;bye ;println JSR2


  HALT
BRK


@init
  #10 .base STZ
JMP2r


@test-memcmp
  ;&test1 #03 ;&test2 ;memcmp JSR2
  #00
  ;assert-equal-u8 JSR2

  ;&test1 INC2 #02 ;&test2 INC2 ;memcmp JSR2
  #01
  ;assert-equal-u8 JSR2

  ;&test3 INC2 #03 ;&test2 INC2 ;memcmp JSR2
  #00
  ;assert-equal-u8 JSR2

  ;&test3 INC2 #01 ;&test3 INC2 ;memcmp JSR2
  #01
  ;assert-equal-u8 JSR2

  ;&test4 INC2 #03 ;&test4 INC2 ;memcmp JSR2
  #01
  ;assert-equal-u8 JSR2

  ;&test3 INC2 #03 ;&test4 INC2 ;memcmp JSR2
  #00
  ;assert-equal-u8 JSR2
JMP2r
&test1 81 "; 00
&test2 01 "; 00
&test3 01 ". 00
&test4 02 ".s 00


@test-parse-number
  ;&base ;print-str JSR2
  space EMIT
  .base LDZ ;print-byte JSR2
  CR
  
  ;&cafe ;parse-number JSR2
  ;print-byte JSR2
  space EMIT
  ;print-short JSR2
  CR
JMP2r
&base 04 "base 00
&cafe 04 "cafe 00


@test-string-equal
  #00
  ;hello ;bye ;string-equal JSR2
  ;assert-equal-u8 JSR2

  #01
  ;hello ;hello ;string-equal JSR2
  ;assert-equal-u8 JSR2

  #00
  ;null ;bye ;string-equal JSR2
  ;assert-equal-u8 JSR2

  #01
  ;null ;null ;string-equal JSR2
  ;assert-equal-u8 JSR2
JMP2r


@hello 05 "hello 00
@bye   04 "bye 00

@base $1


~test.tal
~string.tal

